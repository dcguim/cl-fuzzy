;; tests basic operators
;;;(A')' = A
(let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10))))
	   (fuzzy-comp (fuzzy-comp a))) 

;;;(A^A) = A
(let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10))))
	   (fuzzy-intersect a a))

;;;(AvA) = A
(let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10))))
	   (fuzzy-union a a)) 

;;;(A^0) = 0
(let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10))))
	   (fuzzy-intersect a '())) 

;;;(Av0) = A
 (let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10))))
	   (fuzzy-union a '())) 

;;;(A^U) = A
(let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10)))
       (u '((0 1)(1 1)(2 1)(3 1)(4 1))))
	   (fuzzy-intersect a u))

;;;(AvU) = U
(let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10)))
       (u '((0 1)(1 1)(2 1)(3 1)(4 1))))
	   (fuzzy-union a u))

;;;(A^A') != 0
(let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10))))
	   (fuzzy-intersect a (fuzzy-comp a)))

;;;(AvA') != U
 (let ((a '((0 1/10)(1 2/10)(2 4/10)(3 5/10)(4 8/10))))
	   (fuzzy-union a (fuzzy-comp a)))


